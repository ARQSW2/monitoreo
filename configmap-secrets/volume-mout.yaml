apiVersion: v1
kind: ConfigMap
metadata:
  name: game-demo
data:
  # Keys con valores simple
  player_initial_lives: "3"
  ui_properties_file_name: "user-interface.properties"

  # Keys con valores de tipor archivo (noten el | )
  game.properties: |
    enemy.types=aliens,monsters
    player.maximum-lives=5
  user-interface.properties: |
    color.good=purple
    color.bad=yellow
    allow.textmode=true
---
apiVersion: v1
kind: Pod
metadata:
  name: configmap-demo-pod
spec:
  containers:
    - name: demo
      resources: {}
      image: game.example/demo-game
      env:
        # Mapea el valor player_initial_lives a la valiable de entorno PLAYER_INITIAL_LIVES
        - name: PLAYER_INITIAL_LIVES # Notice that the case is different here
          # obtiene el valor de un configMap
          valueFrom:
            configMapKeyRef:
              name: game-demo # nombre del configmap
              key: player_initial_lives # Clave del configmap
        - name: UI_PROPERTIES_FILE_NAME
          valueFrom:
            configMapKeyRef:
              name: game-demo
              key: ui_properties_file_name
      # Monta el volumen "config" del POD dentro del contenedor en el path /config
      # y lo marca como solo lectura (no se puede alterar el valor dentor del contenedor)
      volumeMounts:
        - name: config
          mountPath: '/config'
          # subPath: se puede usitlizar para seleccionar un archivo puntual dentro del volumen
          readOnly: true
  volumes:
    # Configura un VOLUMEN a nivel de POD (COMO TODOS LOS VOLUMENES)
    - name: config
      configMap:
        # Nombre del configmap donde salen lo valores
        name: game-demo
        # Claves de tipo archivo en el cofigmap a mapear
        items:
          - key: 'game.properties'
            path: 'game.properties'
          - key: 'user-interface.properties'
            path: 'user-interface.properties'
